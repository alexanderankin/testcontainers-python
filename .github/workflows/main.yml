name: testcontainers packages
on:
  # TODO: fix me before merging
#  push:
#    branches: [main]
#  pull_request:
#    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        runtime:
#        - machine: ubuntu-latest
#          python-version: "3.7"
#        - machine: ubuntu-latest
#          python-version: "3.8"
        - machine: ubuntu-latest
          python-version: "3.9"
#        - machine: ubuntu-latest
#          python-version: "3.10"
#        - machine: ubuntu-latest
#          python-version: "3.11"
        component:
        - arangodb
#        - azurite
#        - clickhouse
        - core
#        - elasticsearch
#        - google
#        - kafka
#        - keycloak
        - localstack
#        - meta
#        - minio
#        - mongodb
#        - mssql
#        - mysql
#        - neo4j
#        - nginx
#        - opensearch
#        - oracle
#        - postgres
#        - rabbitmq
#        - redis
#        - selenium
#        - k3s
    runs-on: ${{ matrix.runtime.machine }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup python ${{ matrix.runtime.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.runtime.python-version }}
          cache: poetry
      - name: Install Python dependencies
        run: poetry install
# TODO: consider testing the core separately
#      - name: Run docker diagnostics
#        if: matrix.component == 'core'
#        run: |
#          echo "Build minimal container for docker-in-docker diagnostics"
#          docker build -f Dockerfile.diagnostics -t testcontainers-python .
#          echo "Bare metal diagnostics"
#          python diagnostics.py
#          echo "Container diagnostics with bridge network"
#          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --network=bridge testcontainers-python python diagnostics.py
#          echo "Container diagnostics with host network"
#          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --network=host testcontainers-python python diagnostics.py
      - name: Lint the code
        run: make ${{ matrix.component }}/lint
      - name: Run tests
        run: make ${{ matrix.component }}/tests
      - name: Run doctests
        run: make ${{ matrix.component }}/doctest
# TODO: consider splitting out the publish/release step from `main`
#      - name: Build the package
#        run: make ${{ matrix.component }}/dist
#      - name: Upload the package to pypi
#        if: >
#          github.event_name == 'push'
#          && github.ref == 'refs/heads/main'
#          && github.repository_owner == 'testcontainers'
#          && matrix.runtime.python-version == '3.10'
#          && matrix.runtime.machine == 'ubuntu-latest'
#        env:
#          TWINE_USERNAME: __token__
#          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
#        run: make ${{ matrix.component }}/upload
